@{
    ViewBag.Title = "Home Page";
}

<script>
    var board = null;
    var id;

    $(document).ready(function () {
        $("#depthSpinner").spinner();
        $("#depthSpinner").spinner('value', 1);
        $("#outputLinesSpinner").spinner();
        $("#outputLinesSpinner").spinner('value', 1);
        initializeBoard();
    });
</script>

<script>
    function makeMove(position, caller) {
        $('.move').removeClass('currentMove');
        $(caller).addClass('currentMove');
        board.position(position, true);
    }

    function initializeBoard() {
        var cfg = {
            position: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',
            onChange: onPositionChange,
            sparePieces: true
        };
        board = new ChessBoard('board', cfg);
        board.showErrors = 'console';
        $('#fen').val(cfg.position);
    }

    function onPositionChange(oldPos, newPos) {
        var fen = $('#fen');
        fen.val(ChessBoard.objToFen(newPos));
    }

    function timer() {
        var data = {
            guid: id
        }
        $.get('/Home/GetOutput', data, function (lines, textStatus) {
            var cfg = {
                position: board.fen()
            };
            
            $('#engineOutput').show();
            $('#analysisSettings').hide();

            var headerRow = $('<tr><td>Evaluation</td><td>Line</td></tr>');
            $('#engineTable').append(headerRow);

            for (var j = 0; j < lines.length; j++) {
                var cell = $('<td/>');
                var fakeBoard = new ChessBoard('fakeBoard', cfg);
                var lineInfo = lines[j];
                
                var moves = lineInfo.Moves.split(' ');
                cell.append($('<a class="move" hidden="true" onClick="makeMove(\'' + board.fen() + '\', this)" href="#"></a>'));

                for (var i = 0; i < moves.length; i++) {
                    var move = moves[i];
                    fakeBoard.move(move.slice(0, 2) + '-' + move.slice(-2));
                    var currentPosition = fakeBoard.fen();
                    if (i % 2 == 0) {
                        var currentMove = i / 2 + 1 + '. ';
                        cell.append($(' <span>' + currentMove + '</span>'));
                    }

                    cell.append($('<a class="move" onClick="makeMove(\'' + currentPosition + '\', this)" href="#">' + move + ' </a>'));
                }

                var row = $('<tr/>')
                    .append('<td>' + lineInfo.Score / 100 + '</td>')
                    .append(cell);
                $('#engineTable').append(row);
            }

            var infoRow = '<tr><td colspan="2">' + lines[0].Time / 1000 + ' sec, depth ' + lines[0].Depth + ', ' + lines[0].Nodes + ' nodes' + '</td></tr>';
            $('#engineTable').append(infoRow);
            makeMove(board.fen(), $('#engineTable').find('a').first());
            $('#analysisNavigation').show();
            $('#startNewAnalysisBtn').show();
        });
    }

    function analyze() {
        if (board.fen() == '8/8/8/8/8/8/8/8') {
            alert('Set position for analysis!');
            return;
        }

        $('#positionNavigation').hide();
        
        var moveTurn = $('.moveTurn:checked').val();
        var data = {
            fen: $('#fen').val(),
            depth: $('#depthSpinner').spinner('value'),
            outputLines: $('#outputLinesSpinner').val(),
            whiteToMove: moveTurn == 'Белые' ? true : false
        }
        $.get('/Home/StartAnalyze', data, function (result) {
            id = result;
            setTimeout(timer, 2000);

            var cfg = {
                draggable: false,
                position: board.fen(),
                onChange: onPositionChange,
            };

            board = new ChessBoard('board', cfg);
        });
    }

    function moveLeft() {
        $('.currentMove').prevUntil('#moves', '.move').first().click();
    }

    function moveRight() {
        $('.currentMove').nextUntil('#moves', '.move').first().click();
    }

    function moveStart() {
        $('.currentMove').prevUntil('#moves', '.move').last().click();
    }

    function moveEnd() {
        $('.currentMove').nextUntil('#moves', '.move').last().click();
    }

    function flipBoard() {
        board.flip();
    }

    function setStartPosition() {
        board.start();
    }

    function clearBoard() {
        board.clear();
    }

    function changeBoardFen() {
        board.position($('#fen').val());
    }

    function startNewAnalysis() {
        $('#analysisSettings').show();
        $('#engineTable').empty();
        $('#startNewAnalysisBtn').hide();
        $('#positionNavigation').show();
        $('#analysisNavigation').hide();

        board.destroy();
        initializeBoard();
    }
</script>

<div id="chessBoard">
    <div id="board"></div>
    <div id="analysisNavigation" hidden="true">
        <input type="image" src="/content/images/flip.png" width="16" height="16" id="flip" onclick="flipBoard()"/>
        <input type="image" src="/content/images/start.png" width="16" height="16" onclick="moveStart()" />
        <input type="image" src="/content/images/left.png" width="16" height="16" onclick="moveLeft()" />
        <input type="image" src="/content/images/right.png" width="16" height="16" onclick="moveRight()" />
        <input type="image" src="/content/images/end.png" width="16" height="16"  onclick="moveEnd()" />
    </div>
    <div id="positionNavigation">
        <input type="button" id="startPositionBtn" value="Start Position" onclick="setStartPosition()" />
        <input type="button" id="clearBtn" value="Clear" onclick="clearBoard()" />
    </div>
    <span class="fen">
        <label>FEN: </label>
        <input id="fen" type="text" oninput="changeBoardFen()"/>
    </span>
</div>

<div id="analysis">
    <div id="analysisSettings">
        <label>Depth:</label>
        <input id="depthSpinner" min="1" max="30">
        <label>Output lines:</label>
        <input id="outputLinesSpinner" min="1" max="5">
        <input value="Analyze" type="button" id="analyze" onclick="analyze()" />
        <br />
        <label>Текущий ход:</label>
        <input class="moveTurn" type="radio" name="wer" value="Белые" title="sdfsdf" checked="True" /> <label>Белые</label>
        <input class="moveTurn" type="radio" name="wer" value="Черные" /> <label>Черные</label>
    </div>
    <div id="engineOutput" hidden="true">
        <table border="1" id="engineTable" />
    </div>
    <div id="test">
        <input type="button" id="startNewAnalysisBtn" value="New Analysis" onclick="startNewAnalysis()" hidden="true" />
    </div>
</div>
<div id="fakeBoard" hidden="true" />